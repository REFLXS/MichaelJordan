package main

import (
	"fmt"
)

func printMatrix(m [][]float64, rowLabels, colLabels []string) {
	header := "    "
	for _, label := range colLabels {
		header += fmt.Sprintf("%8s", label)
	}
	fmt.Println(header)

	fmt.Println("---------------------------------------------------")

	for i, row := range m {
		rowStr := fmt.Sprintf("%2s |", rowLabels[i])
		for _, val := range row {
			rowStr += fmt.Sprintf("%8.3f", val)
		}
		fmt.Println(rowStr)
	}
	fmt.Println()
}

func jordanStep(a [][]float64, r, s int) [][]float64 {
	n := len(a)
	m := len(a[0])

	b := make([][]float64, n)
	for i := range b {
		b[i] = make([]float64, m)
	}

	pivot := a[r][s]

	for i := 0; i < n; i++ {
		for j := 0; j < m; j++ {
			if i == r && j == s { // опорный элемент
				b[i][j] = 1.0 / pivot
			} else if i == r { // опорная строка
				b[i][j] = -a[i][j] / pivot
			} else if j == s { // опорный столбец
				b[i][j] = a[i][j] / pivot
			} else { // остальные элементы
				b[i][j] = (a[i][j]*pivot - a[i][s]*a[r][j]) / pivot
			}
		}
	}
	return b
}

func getXVector(matrix [][]float64) []float64 {
	x := make([]float64, len(matrix))
	for i := 0; i < len(matrix); i++ {
		x[i] = matrix[i][i+3]
	}
	return x
}

func main() {
	initialRowLabels := []string{"y1", "y2", "y3"}
	initialColLabels := []string{" ", "x1", "x2", "x3"}

	matrix := [][]float64{
		{1, 2, 0, 1},  // y1 = x1 + 2x2
		{2, 0, -3, 0}, // y2 = 2x1 - 3x3
		{0, 2, 2, 0},  // y3 = 2x2 + 2x3
	}

	fmt.Println("Исходная матрица:")
	printMatrix(matrix, initialRowLabels, initialColLabels)

	matrix = jordanStep(matrix, 1, 2)
	rowLabels1 := []string{"y1", "x3", "y3"}
	colLabels1 := []string{" ", "x1", "x2", "y2"}
	fmt.Println("После замены y2 <-> x3:")
	printMatrix(matrix, rowLabels1, colLabels1)

	matrix = jordanStep(matrix, 0, 0)
	rowLabels2 := []string{"x1", "x3", "y3"}
	colLabels2 := []string{" ", "y1", "x2", "y2"}
	fmt.Println("После замены y1 <-> x1:")
	printMatrix(matrix, rowLabels2, colLabels2)

	matrix = jordanStep(matrix, 2, 4)
	finalRowLabels := []string{"x1", "x3", "x2"}
	finalColLabels := []string{" ", "y1", "y3", "y2"}
	fmt.Println("После замены y3 <-> x2:")
	printMatrix(matrix, finalRowLabels, finalColLabels)

	xVector := getXVector(matrix)
	fmt.Println("Итоговый вектор x:")
	fmt.Printf("x = (%.3f, %.3f, %.3f)\n", xVector[0], xVector[1], xVector[2])
}
